@page "/search"
@using OctoCook.Data.API
@using System.Text.Json
@using System.Text
@using EndToEnd.Data
@using OctoCook.Data.API.Spoonacular
@using System.Text.Json.Nodes


<h3>Search Recipes</h3>

    <div>
        <input class="form-control" type="text"
               placeholder="Recipe"
               @bind="searchString" />
        <br />
        <button class="btn btn-primary" @onclick=@(async () => await getRecipes())>
            Search 
        </button>
        <br />
        <br />
        @if (showDetails == true)
        {
            <div class="card">
                <div class="card-header">
                    <button class="btn btn-success">
                        Save
                    </button>
                    <button class="btn btn-danger" @onclick=(closeRecipe)>
                        Close
                    </button>
                </div>
                <div class="card-body">
                    <h5 class="card-title">Special title treatment</h5>
                    <p class="card-text">This is the text</p>
                </div>
                <div class="card-footer text-muted">
                    source
                </div>
            </div>
        }
        else {
        <div class="container d-flex flex-wrap align-items-center">
            @foreach (var recipe in Recipes)
            {
                <div class="card minicard" style="width: 18rem;" @onclick="(async () => await getRecipesDetails(recipe.id))">
                    <img class="card-img-top" srcset="@recipe.image 2x" alt="Card image cap">
                    <div class="card-body">
                        <h6 class="card-title">@recipe.title</h6>
                    </div>
                </div>
            }
        </div>
        }
</div>


@code {
    string response = "";

    HttpClient _client = new HttpClient();
    List<SpoonRecipe> Recipes = new List<SpoonRecipe>();

    bool showDetails = true;
    string searchString = "";
    string apiString = "https://api.spoonacular.com/recipes/complexSearch?apiKey=41ab32c269db431699d6f5762913f3a7&query=";

    private void closeRecipe(){
        showDetails = false;
    }

    private async Task getRecipesDetails(int recipeID)
    {
        showDetails = true;
        //GET https://api.spoonacular.com/recipes/661043/information?apiKey=41ab32c269db431699d6f5762913f3a7

        var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
        response = await _client.GetStringAsync(apiString + searchString);

        //The recipes are nested in a node called results, so lets grab those
        JsonNode resultsNode = JsonNode.Parse(response)!;
        resultsNode = resultsNode!["results"];

        Recipes = JsonSerializer.Deserialize<List<SpoonRecipe>>(resultsNode.ToJsonString(), options);

    }

    private async Task getRecipes()
    {
        var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
        response = await _client.GetStringAsync(apiString + searchString);

        //The recipes are nested in a node called results, so lets grab those
        JsonNode resultsNode = JsonNode.Parse(response)!;
        resultsNode = resultsNode!["results"];

        Recipes = JsonSerializer.Deserialize<List<SpoonRecipe>>(resultsNode.ToJsonString(), options);

    }




      

}
