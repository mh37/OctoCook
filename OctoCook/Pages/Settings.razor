@page "/settings"
@using EndToEnd.Data
@using System.Text.Json
@using System.Reflection;
@using System.IO;
@inject RecipeDataService RecipeDataService

<h3>Settings</h3>
<br />
<button class="btn btn-success"
        @onclick="ExportData">
    Create Backup
</button>
<br />
@if(exportStatus == 1)
{
    <p>Exporting Recipes...</p>
}else if(exportStatus == 2)
{
    <p>Backup successful</p>
}
<br />
<button class="btn btn-warning"
        @onclick="ImportData">
    Import Backup
</button>
@if(importStatus == 1)
{
    <p>Importing Backup...</p>
}else if(importStatus == 2)
{
    <p>Import successful</p>
}
@code {

    string Error = "";
    int exportStatus = 0; // 1: pending 2: success
    int importStatus = 0; // 1: pending 2: success

    List<EndToEnd.Data.Recipe> recipes = new List<EndToEnd.Data.Recipe>();

    string loadedJSON = "";
    string targetFileName = "backup.txt";

    //Backup will be placed in the AppDataDirectory. This should allow it to be synced with the Google Backup service.

    async Task ExportData()
    {
        //Flag as pending
        exportStatus = 1;
        // load all recipes into the recipe list
        recipes = await RecipeDataService.GetRecipesAsync();
        var json = JsonSerializer.Serialize(recipes);
        // Write the file content to the app data directory
        string targetFile = System.IO.Path.Combine(FileSystem.Current.AppDataDirectory, targetFileName);
        using FileStream outputStream = System.IO.File.OpenWrite(targetFile);
        using StreamWriter streamWriter = new StreamWriter(outputStream);
        await streamWriter.WriteAsync(json);
        // Flag as complete
        exportStatus = 2;
    }

    async Task ImportData()
    {
        //Flag as pending
        importStatus = 1;
        string targetFile = System.IO.Path.Combine(FileSystem.Current.AppDataDirectory, targetFileName);
        using FileStream InputStream = System.IO.File.OpenRead(targetFile);
        using StreamReader reader = new StreamReader(InputStream);
        loadedJSON = await reader.ReadToEndAsync();
        //remove recipes from DB
        await DeleteAllRecipes();
        //write imported recipes to DB
        processImportData();
        await saveListToDB();
        // Flag as complete
        importStatus = 2;
    }

    void processImportData()
    {
        // create recipe list object from json import
        var jdm = JsonSerializer.Deserialize<List<EndToEnd.Data.Recipe>>(loadedJSON);
        recipes = jdm;
    }    

    async Task saveListToDB()
    {
        try
        {
            Error = "";
            foreach (EndToEnd.Data.Recipe r in recipes)
            {
                // Add the recipe
                await RecipeDataService.CreateRecipeAsync(r);
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    async Task DeleteAllRecipes()
    {
        try
        {
            Error = "";
            foreach (EndToEnd.Data.Recipe r in recipes)
            {
                // Delete the recipe
                await RecipeDataService.DeleteRecipeAsync(r);
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }
}
