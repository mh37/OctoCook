@page "/edit/{id}"
@using EndToEnd.Data
@inject RecipeDataService RecipeDataService
@inject NavigationManager UriHelper

<button class="btn btn-primary"
        @onclick="NavigateBack">
    Back
</button>
<button class="btn btn-success"
        @onclick="SaveRecipe">
    Save
</button>
<button class="btn btn-danger"
        @onclick="DeleteRecipe">
    Delete
</button>

<p style="color:red">@Error</p>
@if (recipe == null)
{
    <!-- Show this if the current user has no data... yet... -->
    <p><em>Loading...</em></p>
}
else
{
    <h2>@recipe.Title</h2>

    <label>Title:</label>
    <input class="form-control" type="text"
        placeholder="Title"
        @bind="recipe.Title" />
    <label>Ready in (minutes):</label>
    <input class="form-control" type="text"
       placeholder="minutes"
       @bind="recipe.ReadyInMinutes" />
    <label>Servings:</label>
    <input class="form-control" type="text"
       placeholder="Servings"
       @bind="recipe.Servings" />
    <label>Summary:</label>
    <TinyMCE.Blazor.Editor 
        ScriptSrc="/lib/tinymce/tinymce.min.js"
        Conf="@editorConf"
        @bind-Value=recipe.Summary />
    <br />
    <label>Ingredients:</label>
    <TinyMCE.Blazor.Editor 
        ScriptSrc="/lib/tinymce/tinymce.min.js"
        Conf="@editorConf"
        @bind-Value=recipe.Ingredients />
    <br />
    <label>Instructions:</label>
    <TinyMCE.Blazor.Editor 
        ScriptSrc="/lib/tinymce/tinymce.min.js"
        Conf="@editorConf"
        @bind-Value=recipe.Instructions />
    <br />


}

@code
{
    private Dictionary<string, object> editorConf = new Dictionary<string, object>{
       { "menubar", false },
       { "plugins", "link lists code autoresize" },
       { "toolbar", "undo redo | styleselect | bold italic numlist bullist" }
     };

    [Parameter]
    public string Id { get; set; }

    string Error = "";
    Recipe recipe = new Recipe();

    protected override async Task OnInitializedAsync()
    {
        // Get the forecasts
        recipe = await RecipeDataService.GetRecipeAsync(int.Parse(Id));
    }

    async Task SaveRecipe()
    {
        Error = "";
        try
        {
            // This is an update
            await RecipeDataService.UpdateRecipeAsync(recipe);
            NavigateBack();
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    async Task DeleteRecipe()
    {
        try
        {
            Error = "";
            // Delete the recipe
            await RecipeDataService.DeleteRecipeAsync(recipe);
            NavigateBack();
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    void NavigateBack()
    {
        UriHelper.NavigateTo("/recipes");
    }

}