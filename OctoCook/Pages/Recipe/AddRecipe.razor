@page "/add"
@using EndToEnd.Data
@inject RecipeDataService RecipeDataService
@inject NavigationManager UriHelper


<button class="btn btn-primary"
        @onclick="NavigateBack">
    Back
</button>

<p style="color:red">@Error</p>

<h2>New Recipe</h2>

<label>Title:</label>
<input class="form-control" type="text"
    placeholder="Title"
       @bind="objRecipe.Title" />
<label>Ingredients:</label>
<textarea class="form-control" type="text"
          placeholder="Ingredients"
          @bind="objRecipe.Ingredients" />
<label>Instructions:</label>
<TinyMCE.Blazor.Editor 
    ScriptSrc="/lib/tinymce/tinymce.min.js"
    Conf="@editorConf" 
    @bind-Value=objRecipe.Instructions
/>
<br />
<button class="btn btn-success"
    @onclick="SaveRecipe">
    Save
</button>


@code
{
    private Dictionary<string, object> editorConf = new Dictionary<string, object>{
       { "menubar", false },
       { "plugins", "link code" },
       { "toolbar", "undo redo | styleselect | bold italic" }
     };

    Recipe objRecipe = new EndToEnd.Data.Recipe();
    string Error = "";

    async Task SaveRecipe()
    {
        Error = "";

        try{
            // Create new recipe
            List<EndToEnd.Data.Recipe> recipes = new List<EndToEnd.Data.Recipe>();
            EndToEnd.Data.Recipe recipe = new EndToEnd.Data.Recipe();
            recipe.Date = System.DateTime.Now;
            recipe.Ingredients = objRecipe.Ingredients;
            recipe.Instructions = objRecipe.Instructions;
            recipe.Title = objRecipe.Title;
            // Save the result
            var NewRecipe =
            await RecipeDataService.CreateRecipeAsync(recipe);
            // Add the recipe
            recipes.Add(NewRecipe);
            NavigateBack();
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
        
    }


    void NavigateBack()
    {
        UriHelper.NavigateTo("/recipes");
    }

}